#+TITLE: Basic stuff for *MIX*


#+LATEX: \textit{Abstract.}\quad Potential implementation of the \textbf{MIX} computer from \textsc{D.\hskip1ptE. Knuth}.\vskip-6pt
#+LATEX: \textsl{There is more to symbols than meets the eye},\footnote{Famous quote by \textsc{Paul Graham}} so we'll try to work with integers.\vskip-6pt
We work out the basic types, structs and the most important struct,
*MIX* itself.

*** Type definitions

**** Simple bit type aliases

First off all let's define some type synonyms for /bit/, the numbers 0 and 1.
We have ~MIX-BIT~ which is just a normal bit. Then the type
~MIX-SIGN~ which inherits from ~MIX-BIT~.

#+begin_src lisp :tangle yes
  (deftype mix-bit  () 'bit)
  (deftype mix-sign () 'mix-bit)
#+end_src

**** Bits, Nybbles & Bytes

MIX uses two kinds of bytes, half and full. It might be unusual to you, but a ~BYTE~ has not to
be eight bits long. In MIX it is /six/ bits long, so a half byte, also called a ~NYBBLE~, is
/three/ bits long. Here we define those types with one-dimensional ~SIMPLE-ARRAY~ of length
3 and 6 with the ~ELEMENT-TYPE~ of ~MIX-BIT~.

#+begin_src lisp :tangle yes
  (deftype mix-byte (bits) `(simple-array mix-bit (,bits)))
  (deftype mix-half-byte () '(mix-byte 3))
  (deftype mix-full-byte () '(mix-byte 6))
#+end_src

*** Structs for *MIX* words

With those things in our toolset the first structs can see the light to be born.
We use structs instead of classes cause they provide all we need, are efficient in getting
and setting and can easily be static typed down to the last. CLOS is the *most powerful OOP system
in the galaxy* but sometimes too heavy.

#+begin_src lisp :tangle yes
  (let ((alist '((2 . mix-half-word)
                 (5 . mix-full-word))))
    (macrolet
        ((defword (bytes)
           (let* ((elem (assoc bytes alist :test '=))
                  (name (cdr elem)))
             `(defstruct ,name
                (sign 0 :type mix-sign)
                (contents (make-array ,bytes :element-type 'mix-full-byte))))))
      (dolist (n '(2 5)) `(defword ,n))))
#+end_src

#+begin_src lisp :tangle yes
  (defgeneric sign (word))
#+end_src

**** Symbol Macros

Time has come for some symbol macros! Here those are just aliases for long words.

#+begin_src lisp :tangle yes
  (let ((alist '(
                 ;; bytes
                 (mhb . mix-half-byte)
                 (mfb . mix-full-byte)
                 ;; words
                 (mhw . mix-half-word)
                 (mfw . mix-full-word)
                 )))
    (dolist (elem alist)
      `(define-symbol-macro ,(car elem) ',(cdr elem))))
#+end_src

**** ~SIGN-CHAR~ function

Now we need a compact function to calculate the corresponding char to the sign bit.
To be stringent with Common Lisp and functions like ~CODE-CHAR~ we name it ~SIGN-CHAR~.
So how does the bits map to ~#\+~ and ~#\-~ ? It's just not as difficult.
If we look up the ~ASCII~-code of both we get the association list ~'((#\+ . 43) (#\- . 45))~.
/But what lies between those?/ Glad you ask! Well, try it out with ~(code-char 44)~ and you will
get the comma sign ~#\,~.

With the fact in mind that ~0~ stands for ~#\+~ and ~1~ for ~#\-~ it can be found with above
the formula $c(b) = 43 + 2n\,;\;c(0) = 43,\;c(1) = 45$.

#+begin_src lisp :tangle yes
  (defun sign-char (bit)
    "Calculate the corresponding char to a sign bit for a half or full word."
    (declare (type mix-sign bit))
    (code-char
     ;; The formula 43 + 2*n.
     (+ 43 (* 2 bit))))
#+end_src

**** ~PRINT-OBJECT~ methods for ~MIX~ words

The print methods for half and full words are equivalent, they even use the same control string.
So we span up a local ~LET~ space to not define it twice.
We /could/ abstract it in a little macro, but no, the macro time hasn't come yet in our program.

To give you an example of how it will look like, consider the following:

#+begin_src lisp
  (format nil "[ ~c | ~{~b~} ]" #\+ '(1 0 0 1 1))
#+end_src

That gives you ~[ + | 10011 ]~ as aesthetic print for a random ~MIX~ full word.

#+begin_src lisp :tangle yes
  (let ((control-string "[ ~c | ~{~b~} ]")
        (alist '((3 . (mix-half-word
                       mix-half-word-sign
                       mix-half-word-contents))
                 (6 . (mix-full-word
                       mix-full-word-sign
                       mix-full-word-contents)))))
    (macrolet
        ((print-word (length)
           (let ((lst (assoc 3 alist))
                 (word (gensym "WORD"))
                 (sign (gensym "SIGN"))
                 (plus/minus (gensym "PLUS/MINUS"))
                 (contents (gensym "CONTENTS")))
             `(defmethod print-object ((,word ,(first lst)) stream)
                (let* ((,sign (,(second lst) ,word))
                       (,plus/minus (sign-char ,sign)))
                  (let ((,contents (,(third lst) ,word)))
                    (format stream
                            ,control-string
                            ,plus/minus ,contents)))))))
      (dolist (len '(3 6)) (print-word len))))
#+end_src

**** The special J-register

As in the [[https://google.github.io/styleguide/lispguide.xml][Google Common Lisp style guide]] advised (see the last section ~#SATISFIES~, the hole guide is /excellent!/),
use ~EVAL-WHEN~ to define the predicate for a half word to be of type ~rJ-word~.
It is a normal word, /except/ the sign always fix $+$.

#+begin_src lisp :tangle yes
  (eval-when (:compile-toplevel :load-toplevel :execute)
    (defun rJ-word-p (word)
      "Is WORD an rJ-word? Means just being positive fixed."
      (when (mix-half-word-p word)
        ;; The sign must bei +, so the value constant 0.
        (= 0 (mix-half-word-sign word)))))
#+end_src

#+begin_src lisp :tangle yes
  ;; type for the rJ register, always positive signed
  (deftype rJ-word ()
    '(and mix-half-word (satisfies rJ-word-p)))
#+end_src

#+LATEX: %% \newpage

**** The struct for the *MIX* machine itself
#+begin_src lisp -n :tangle yes
  (macrolet ((index-register (reg)
               `(,reg (make-mix-half-word) :type mhw)))
    (defstruct mix-machine
    ;;; REGISTERS
      ;; accumulator register, five bytes plus sign
      (rA (make-mix-full-word) :type mfw)
      ;; Extension Register
      ;; five bytes plus sign
      (rX (make-mix-full-word) :type mfw)
      ;; Index Registers
      ;; two bytes plus sign
      (dolist (reg '(rI1 rI2 rI3 rI4 rI5 rI6))
        (index-register reg))
      ;; Jump Address Register
      ;; holds two bytes, sign always +
      (rJ  (make-mix-half-word) :type rJ-word)
      ;; Overflow Toggle
      (overflow-toggle 0 :type bit)
      ;; Comparison Indicator
      ;; we have '((< . -1) (= . 0) (> . 1))
      (comparison-indicator 0 :type (integer -1 1))
    ;;; Memory Cells
      ;; MIX has 4000 congruent memory cells of 6 MIX-Bytes.
      (memory-cells
       (make-array 4000
                   :initial-element (make-array 6 :element-type 'mfb)
                   :element-type '(simple-array mfb (6)))
       :type (simple-array (simple-array mfb (6)) (4000)))
    ;;; Is the rest RAM?
      ;; Magnetic Tape Units
      (magnetic-tape-units (make-array 8 :element-type 'mfb)
       :type (simple-array mfb (8)))
      ;; Disk and Drums
      (disk-and-drums (make-array 8 :element-type 'mfb)
       :type (simple-array mfb (8)))
      ;; Card Reader
      (card-reader 0 :type mfb)
      ;; Card Punch
      (card-punch 0 :type mfb)
      ;; Line Printer
      (line-printer 0 :type mfb)
      ;; Paper Tape
      (paper-tape 0 :type mfb)))
#+end_src

#+begin_src lisp :tangle yes
  (defun comparison-indicator-char (toggle)
    "Gets you the corresponding char of the comparison indicator."
    (declare (type (integer -1 1) toggle))
    (code-char
     ;; The formula 61 + n.
     (+ 61 toggle)))
#+end_src
